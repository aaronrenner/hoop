name: hoop

services:
  bootstrap:
    image: hoophq/hooplabs
    networks:
      - hoopdev
    volumes:
      - hoopdata:/hoopdata
    env_file: ".env"
    command: bootstrap.sh
  db:
    image: postgres:16
    networks:
      - hoopdev
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hoopdb
      # avoid errors on healthcheck
      PGUSER: postgres
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "zitadel", "-U", "postgres"]
      interval: "2s"
      timeout: "30s"
      retries: 10
      start_period: "20s"
  nginx:
    image: hoophq/hooplabs
    command: run-nginx.sh
    environment:
      - HOOP_PUBLIC_HOSTNAME=${HOOP_PUBLIC_HOSTNAME}
      - HOOP_TLS_MODE=${HOOP_TLS_MODE}
    volumes:
      - hoopdata:/hoopdata
    depends_on:
      db:
        condition: "service_healthy"
    ports:
      - 80:80
      - 443:443
    networks:
      - hoopdev
  gateway:
    image: hoophq/hooplabs
    command: "run-gateway.sh"
    user: root
    env_file: ".env"
    networks:
      - hoopdev
    volumes:
      - hoopdata:/hoopdata
    healthcheck:
      test: "curl -f http://127.0.0.1:8009/api/healthz"
      interval: "1s"
      timeout: "30s"
      retries: 15
      start_period: "20s"
    depends_on:
      - nginx
  agent:
    image: hoophq/hooplabs
    volumes:
      - hoopdata:/hoopdata/
    networks:
      - hoopdev
    environment:
      - POSTGRES_DB_URI=postgres://postgres:postgres@db:5432/hoopdb?sslmode=disable
      - LOG_LEVEL=info
      - LOG_ENCODING=console
      - HOOP_PUBLIC_HOSTNAME=${HOOP_PUBLIC_HOSTNAME}
      - HOOP_TLS_MODE=${HOOP_TLS_MODE}
    depends_on:
      gateway:
        condition: "service_healthy"
    command: run-agent.sh

volumes:
  hoopdata: null

networks:
  hoopdev:
